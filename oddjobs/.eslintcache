[{"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\index.js":"1","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\reportWebVitals.js":"2","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\OddJobs.js":"3","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\Job.js":"4","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobList.js":"5","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobProvider.js":"6","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\ApplicationViews.js":"7","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\nav\\NavBar.js":"8","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobForm.js":"9","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\category\\CategoryProvider.js":"10","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobDetail.js":"11","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\DeleteJob.js":"12","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\auth\\Login.js":"13","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\auth\\Register.js":"14","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceList.js":"15","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceProvider.js":"16","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\Service.js":"17","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceDetail.js":"18","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\DeleteService.js":"19","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceForm.js":"20","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobSearch.js":"21","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobFilter.js":"22","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\FilterForm.js":"23","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\api\\APIProvider.js":"24","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceSearch.js":"25","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceFilter.js":"26","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\FilterForm.js":"27"},{"size":594,"mtime":1608573419487,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":598,"mtime":1608746083130,"results":"31","hashOfConfig":"29"},{"size":599,"mtime":1609421389510,"results":"32","hashOfConfig":"29"},{"size":3177,"mtime":1609610802227,"results":"33","hashOfConfig":"29"},{"size":1582,"mtime":1609352976637,"results":"34","hashOfConfig":"29"},{"size":2351,"mtime":1609514343305,"results":"35","hashOfConfig":"29"},{"size":757,"mtime":1608573570200,"results":"36","hashOfConfig":"29"},{"size":5285,"mtime":1609361348369,"results":"37","hashOfConfig":"29"},{"size":695,"mtime":1608736931669,"results":"38","hashOfConfig":"29"},{"size":1043,"mtime":1609420935516,"results":"39","hashOfConfig":"29"},{"size":946,"mtime":1609376966135,"results":"40","hashOfConfig":"29"},{"size":1836,"mtime":1608746559873,"results":"41","hashOfConfig":"29"},{"size":2814,"mtime":1608746624331,"results":"42","hashOfConfig":"29"},{"size":3591,"mtime":1609610799598,"results":"43","hashOfConfig":"29"},{"size":1706,"mtime":1609514990292,"results":"44","hashOfConfig":"29"},{"size":571,"mtime":1608801412245,"results":"45","hashOfConfig":"29"},{"size":1100,"mtime":1608759453179,"results":"46","hashOfConfig":"29"},{"size":964,"mtime":1608801764285,"results":"47","hashOfConfig":"29"},{"size":5889,"mtime":1609517002932,"results":"48","hashOfConfig":"29"},{"size":418,"mtime":1609375318757,"results":"49","hashOfConfig":"29"},{"size":580,"mtime":1609423492722,"results":"50","hashOfConfig":"29"},{"size":5636,"mtime":1609420054115,"results":"51","hashOfConfig":"29"},{"size":723,"mtime":1609371274438,"results":"52","hashOfConfig":"29"},{"size":438,"mtime":1609422335145,"results":"53","hashOfConfig":"29"},{"size":586,"mtime":1609424647277,"results":"54","hashOfConfig":"29"},{"size":5789,"mtime":1609610193115,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"laym8t",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"58"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"58"},"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\index.js",[],["123","124"],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\reportWebVitals.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\OddJobs.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\Job.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobList.js",["125","126"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { JobContext } from \"./JobProvider\";\r\nimport { Job } from \"./Job\";\r\nimport { JobSearch } from \"./JobSearch\";\r\nimport { JobFilter } from \"./JobFilter\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { DeleteJob } from \"./DeleteJob\";\r\nimport \"./Job.css\";\r\n\r\nexport const JobList = () => {\r\n  const { jobs, getJobs, searchTerms, filteredSearch } = useContext(JobContext);\r\n  const [visibleJobs, setVisibleJobs] = useState([]);\r\n  const [filteredJobs, setFiltered] = useState([]);\r\n\r\n  const currentUser = localStorage.getItem(\"user\");\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getJobs();\r\n  }, []);\r\n\r\n  //only show visable jobs\r\n  useEffect(() => {\r\n    const filteredVisibleJobs = jobs.filter((job) => job.visible === true);\r\n    setVisibleJobs(filteredVisibleJobs);\r\n  }, [jobs]);\r\n\r\n  // useEffect dependency array with dependencies - will run if dependency changes (state)\r\n  // searchTerms will cause a change\r\n  useEffect(() => {\r\n    if (searchTerms !== \"\") {\r\n      //if blank show all\r\n      const subset = visibleJobs.filter((job) =>\r\n        job.title.toLowerCase().includes(searchTerms)\r\n      );\r\n      setFiltered(subset);\r\n    } else if (filteredSearch != null) {\r\n      setFiltered(filteredSearch);\r\n    } else {\r\n      setFiltered(visibleJobs);\r\n    }\r\n  }, [jobs, searchTerms, visibleJobs]);\r\n\r\n  useEffect(() => {\r\n    if (filteredSearch != null) {\r\n      setFiltered(filteredSearch);\r\n    }\r\n  }, [filteredSearch]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"jobs-header\">\r\n        <h2>Open Jobs</h2>\r\n        <div>\r\n          <button\r\n            onClick={() => {\r\n              if (currentUser) {\r\n                history.push(\"/jobs/create\");\r\n              } else {\r\n                history.push(\"/login\");\r\n              }\r\n            }}\r\n          >\r\n            Add Job\r\n          </button>\r\n        </div>\r\n        <JobSearch />\r\n      </div>\r\n      <div className=\"jobs row\">\r\n        <div className=\"nine columns jobTable\">\r\n          <table className=\"u-full-width\">\r\n            <thead>\r\n              <tr>\r\n                <th>Job</th>\r\n                <th>Category</th>\r\n                <th>Pay</th>\r\n                <th>Location</th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredJobs.map((job) => (\r\n                <Job\r\n                  key={job.id}\r\n                  job={job}\r\n                  editBtn={\r\n                    <Link to={`/jobs/edit/${job.id}`} className=\"editBtn\">\r\n                      <FontAwesomeIcon icon={faEdit} />\r\n                    </Link>\r\n                  }\r\n                  deleteBtn={<DeleteJob id={job.id} title={job.title} />}\r\n                />\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"three columns jobFilters\">\r\n          <JobFilter />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobProvider.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\ApplicationViews.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\nav\\NavBar.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobForm.js",["127","128"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { JobContext } from \"./JobProvider\";\r\nimport { CategoryContext } from \"../category/CategoryProvider\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n//import SimpleReactValidator from \"simple-react-validator\";\r\n\r\nexport const JobForm = () => {\r\n  const { addJob, getJobById, editJob } = useContext(JobContext);\r\n  const { categories, getCategories } = useContext(CategoryContext);\r\n\r\n  const [job, setJob] = useState({});\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [checked, setChecked] = useState(true);\r\n  const handleClick = () => {\r\n    if (checked === true) {\r\n      setChecked(false);\r\n    } else {\r\n      setChecked(true);\r\n    }\r\n  };\r\n\r\n  const { jobId } = useParams();\r\n  const history = useHistory();\r\n\r\n  const handleControlledInputChange = (event) => {\r\n    const newJob = { ...job };\r\n    newJob[event.target.name] = event.target.value;\r\n    setJob(newJob);\r\n  };\r\n\r\n  const handleJob = () => {\r\n    if (job.jobCategoryId === \"0\") {\r\n      window.alert(\"Please select a job category\");\r\n    } else {\r\n      if (jobId) {\r\n        //setIsLoading(true);\r\n        editJob({\r\n          id: jobId,\r\n          title: job.title,\r\n          jobCategoryId: parseInt(job.jobCategoryId),\r\n          pay: job.pay,\r\n          details: job.details,\r\n          userId: localStorage.getItem(\"user\"),\r\n          zipCode: parseInt(job.zipCode),\r\n          visible: checked,\r\n          posted: Date.now(),\r\n        }).then(() => history.push(\"/\"));\r\n      } else {\r\n        //POST - add\r\n        addJob({\r\n          title: job.title,\r\n          jobCategoryId: parseInt(job.jobCategoryId),\r\n          pay: job.pay,\r\n          details: job.details,\r\n          userId: 1,\r\n          zipCode: parseInt(job.zipCode),\r\n          visible: checked,\r\n          posted: Date.now(),\r\n        }).then(() => history.push(\"/\"));\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCategories().then(() => {\r\n      if (jobId) {\r\n        getJobById(jobId).then((job) => {\r\n          setJob(job);\r\n          setIsLoading(false);\r\n        });\r\n      } else {\r\n        setIsLoading(true);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h4>{jobId ? <>Edit Job</> : <>Add New Job</>}</h4>\r\n      <form>\r\n        <div className=\"row\">\r\n          <div className=\"six columns\">\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              onChange={handleControlledInputChange}\r\n              type=\"text\"\r\n              id=\"jobTitle\"\r\n              name=\"title\"\r\n              maxLength=\"50\"\r\n              value={job.title}\r\n              required\r\n              autoFocus\r\n            />\r\n          </div>\r\n          <div className=\"six columns\">\r\n            <label htmlFor=\"\">Category</label>\r\n            <select\r\n              onChange={handleControlledInputChange}\r\n              onClick={handleClick}\r\n              name=\"jobCategoryId\"\r\n              id=\"jobCatelory\"\r\n              value={job.jobCategoryId}\r\n              required\r\n            >\r\n              <option value=\"0\">Select a Catelory</option>\r\n              {categories.map((c) => (\r\n                <option key={c.id} value={c.id}>\r\n                  {c.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"four columns\">\r\n            <label htmlFor=\"\">Pay</label>\r\n            <input\r\n              onChange={handleControlledInputChange}\r\n              type=\"text\"\r\n              id=\"jobPay\"\r\n              name=\"pay\"\r\n              maxLength=\"50\"\r\n              value={job.pay}\r\n              required\r\n              autoFocus\r\n            />\r\n          </div>\r\n          <div className=\"four columns\">\r\n            <label htmlFor=\"\">Zip Code</label>\r\n            <input\r\n              onChange={handleControlledInputChange}\r\n              type=\"text\"\r\n              id=\"zipCode\"\r\n              name=\"zipCode\"\r\n              maxLength=\"5\"\r\n              value={job.zipCode}\r\n              required\r\n              autoFocus\r\n            />\r\n          </div>\r\n          <div className=\"four columns\">\r\n            <label htmlFor=\"\">Visible</label>\r\n            <input\r\n              onChange={handleClick}\r\n              id=\"visible\"\r\n              name=\"visible\"\r\n              autoFocus\r\n              type=\"checkbox\"\r\n              checked={checked}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <label htmlFor=\"\">Details</label>\r\n          <textarea\r\n            onChange={handleControlledInputChange}\r\n            className=\"u-full-width\"\r\n            placeholder=\"Decription of job\"\r\n            id=\"details\"\r\n            name=\"details\"\r\n            value={job.details}\r\n            required\r\n          ></textarea>\r\n        </div>\r\n        <input\r\n          //disabled={isLoading}\r\n          onClick={(event) => {\r\n            if (job.title && job.pay && job.zipCode) {\r\n              event.preventDefault();\r\n              handleJob();\r\n            }\r\n          }}\r\n          className=\"button-primary\"\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n        ></input>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\category\\CategoryProvider.js",["129"],"import React, { useState, useEffect } from \"react\";\r\nexport const CategoryContext = React.createContext();\r\n\r\nexport const CategoryProvider = (props) => {\r\n  const [categories, setCategory] = useState([]);\r\n\r\n  const getCategories = () => {\r\n    return fetch(\"http://localhost:8088/jobcategories\")\r\n      .then((res) => res.json())\r\n      .then(setCategory);\r\n  };\r\n\r\n  const getCategoryById = (id) => {\r\n    return fetch(`http://localhost:8088/jobcategories/${id}`).then((res) =>\r\n      res.json()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <CategoryContext.Provider\r\n      value={{ categories, getCategories, getCategoryById }}\r\n    >\r\n      {props.children}\r\n    </CategoryContext.Provider>\r\n  );\r\n};\r\n","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobDetail.js",["130"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { JobContext } from \"./JobProvider\";\r\n\r\nexport const JobDetail = () => {\r\n  const { getJobById } = useContext(JobContext);\r\n  const [job, setJob] = useState({});\r\n  const { jobId } = useParams();\r\n\r\n  useEffect(() => {\r\n    getJobById(jobId).then((response) => {\r\n      setJob(response); //set selected job\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"jobDetailContainer container\">\r\n      <h3 className=\"job_title\">{job.title}</h3>\r\n      <div>Posted: {job.posted}</div>\r\n      <div> Job Category: {job.jobCategory?.name}</div>\r\n      <div className=\"row\">\r\n        <div className=\"one-half  column\">Pay: {job.pay}</div>\r\n        <div className=\"one-half column\"> Location: {job.zipCode}</div>\r\n      </div>\r\n      <p className=\"job_details\">Details: {job.details}</p>\r\n      <Link className=\"backLink\" to=\"/\">\r\n        Back\r\n      </Link>\r\n    </section>\r\n  );\r\n};\r\n","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\DeleteJob.js",["131","132","133"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { confirmAlert } from \"react-confirm-alert\"; // Import\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css\r\nimport { JobContext } from \"./JobProvider\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const DeleteJob = (job) => {\r\n  const { deleteJob } = useContext(JobContext);\r\n\r\n  //show confirm modal\r\n  const alert = () => {\r\n    confirmAlert({\r\n      title: \"Delete Job\",\r\n      message: `Are you sure you want to delete ${job.title}`,\r\n      buttons: [\r\n        {\r\n          label: \"Yes\",\r\n          onClick: () => deleteJob(job.id),\r\n        },\r\n        {\r\n          label: \"No\", //close modal\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <a className=\"deleteBtn\" onClick={alert}>\r\n      <FontAwesomeIcon icon={faTrash} />\r\n    </a>\r\n  );\r\n};\r\n","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\auth\\Login.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\auth\\Register.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceList.js",["134","135"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ServiceContext } from \"./ServiceProvider\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Service } from \"./Service\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { DeleteService } from \"./DeleteService\";\r\nimport { ServiceSearch } from \"./ServiceSearch\";\r\nimport { ServiceFilter } from \"./ServiceFilter\";\r\nimport \"./Service.css\";\r\n\r\nexport const ServiceList = () => {\r\n  const { services, getServices, searchTerms, filteredSearch } = useContext(\r\n    ServiceContext\r\n  );\r\n  const [visibleServices, setVisibleServices] = useState([]);\r\n  const [filteredJobs, setFiltered] = useState([]);\r\n  const currentUser = localStorage.getItem(\"user\");\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getServices();\r\n  }, []);\r\n\r\n  //only show visable services\r\n  useEffect(() => {\r\n    const filteredVisibleServices = services.filter(\r\n      (service) => service.visible === true\r\n    );\r\n    setVisibleServices(filteredVisibleServices);\r\n  }, [services]);\r\n\r\n  // useEffect dependency array with dependencies - will run if dependency changes (state)\r\n  // searchTerms will cause a change\r\n  useEffect(() => {\r\n    if (searchTerms !== \"\") {\r\n      // If the search field is not blank, display matching services\r\n      const subset = visibleServices.filter((service) =>\r\n        service.title.toLowerCase().includes(searchTerms)\r\n      );\r\n      setFiltered(subset);\r\n    } else if (filteredSearch != null) {\r\n      setFiltered(filteredSearch);\r\n    } else {\r\n      // If the search field is blank, display all services\r\n      setFiltered(visibleServices);\r\n    }\r\n  }, [searchTerms, services, visibleServices]);\r\n\r\n  useEffect(() => {\r\n    if (filteredSearch != null) {\r\n      setFiltered(filteredSearch);\r\n    }\r\n  }, [filteredSearch]);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"service_header\">\r\n        <h2 className=\"services_title\">Services</h2>\r\n        <button\r\n          onClick={() => {\r\n            if (currentUser) {\r\n              history.push(\"/services/create\");\r\n            } else {\r\n              history.push(\"/login\");\r\n            }\r\n          }}\r\n        >\r\n          Add Service\r\n        </button>\r\n        <div>\r\n          <ServiceSearch />\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"services nine columns\">\r\n          <table className=\"u-full-width\">\r\n            <thead>\r\n              <tr>\r\n                <th>Job</th>\r\n                <th>Category</th>\r\n                <th>Price</th>\r\n                <th>Location</th>\r\n                <th></th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredJobs.map((service) => {\r\n                return (\r\n                  <Service\r\n                    key={service.id}\r\n                    service={service}\r\n                    editBtn={\r\n                      <Link to={`/services/edit/${service.id}`}>\r\n                        <FontAwesomeIcon icon={faEdit} />\r\n                      </Link>\r\n                    }\r\n                    deleteBtn={\r\n                      <DeleteService id={service.id} title={service.title} />\r\n                    }\r\n                  />\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <div className=\"three columns services_filters\">\r\n          <ServiceFilter />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceProvider.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\Service.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceDetail.js",["136","137"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { ServiceContext } from \"./ServiceProvider\";\r\n\r\nexport const ServiceDetail = () => {\r\n  const { getServiceById } = useContext(ServiceContext);\r\n  const [service, setService] = useState({});\r\n  const { serviceId } = useParams();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    getServiceById(serviceId).then((response) => {\r\n      setService(response);\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <section className=\"service container\">\r\n      <h3 className=\"service_title\">{service.title}</h3>\r\n      <div>Posted: {service.posted}</div>\r\n      <div className=\"row\">\r\n        <div className=\"one-third column\">\r\n          {\" \"}\r\n          Service Category: {service.jobCategory?.name}\r\n        </div>\r\n        <div className=\"one-third  column\">Price: {service.price}</div>\r\n        <div className=\"one-third column\"> Location: {service.zipCode}</div>\r\n      </div>\r\n      <p className=\"service_details\">Details: {service.details}</p>\r\n    </section>\r\n  );\r\n};\r\n","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\DeleteService.js",["138","139","140"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { confirmAlert } from \"react-confirm-alert\"; // Import\r\nimport \"react-confirm-alert/src/react-confirm-alert.css\"; // Import css\r\nimport { ServiceContext } from \"./ServiceProvider\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const DeleteService = (service) => {\r\n  const { deleteService } = useContext(ServiceContext);\r\n\r\n  //show confirm modal\r\n  const alert = () => {\r\n    confirmAlert({\r\n      title: \"Delete Service\",\r\n      message: `Are you sure you want to delete ${service.title}`,\r\n      buttons: [\r\n        {\r\n          label: \"Yes\",\r\n          onClick: () => deleteService(service.id),\r\n        },\r\n        {\r\n          label: \"No\", //close modal\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <a onClick={alert}>\r\n      <FontAwesomeIcon icon={faTrash} />\r\n    </a>\r\n  );\r\n};\r\n","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceForm.js",["141"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport { ServiceContext } from \"./ServiceProvider\";\r\nimport { CategoryContext } from \"../category/CategoryProvider\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\n\r\nexport const ServiceForm = () => {\r\n  const { addService, getServiceById, editService } = useContext(\r\n    ServiceContext\r\n  );\r\n  const { categories, getCategories } = useContext(CategoryContext);\r\n\r\n  const [service, setService] = useState({});\r\n  const [checked, setChecked] = useState(true);\r\n  const handleClick = () => {\r\n    if (checked === true) {\r\n      setChecked(false);\r\n    } else {\r\n      setChecked(true);\r\n    }\r\n  };\r\n\r\n  const { serviceId } = useParams();\r\n  const history = useHistory();\r\n\r\n  const handleControlledInputChange = (event) => {\r\n    const newService = { ...service };\r\n    newService[event.target.name] = event.target.value;\r\n    setService(newService);\r\n  };\r\n\r\n  const handleService = () => {\r\n    if (service.jobCategoryId === \"0\") {\r\n      window.alert(\"Please select a service category\");\r\n    } else {\r\n      if (serviceId) {\r\n        editService({\r\n          id: serviceId,\r\n          title: service.title,\r\n          jobCategoryId: parseInt(service.jobCategoryId),\r\n          price: service.price,\r\n          details: service.details,\r\n          userId: parseInt(localStorage.getItem(\"user\")),\r\n          zipCode: parseInt(service.zipCode),\r\n          serviceRadius: parseInt(service.serviceRadius),\r\n          visible: checked,\r\n          posted: Date.now(),\r\n        }).then(() => history.push(\"/services\"));\r\n      } else {\r\n        addService({\r\n          title: service.title,\r\n          jobCategoryId: parseInt(service.jobCategoryId),\r\n          price: service.price,\r\n          details: service.details,\r\n          userId: parseInt(localStorage.getItem(\"user\")),\r\n          zipCode: parseInt(service.zipCode),\r\n          serviceRadius: parseInt(service.serviceRadius),\r\n          visible: checked,\r\n          posted: Date.now(),\r\n        }).then(() => history.push(\"/services\"));\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCategories().then(() => {\r\n      if (serviceId) {\r\n        getServiceById(serviceId).then((service) => {\r\n          setService(service);\r\n        });\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h4>{serviceId ? <>Edit Service</> : <>Add New Service</>}</h4>\r\n      <form>\r\n        <div className=\"row\">\r\n          <div className=\"six columns\">\r\n            <label htmlFor=\"\">Title</label>\r\n            <input\r\n              onChange={handleControlledInputChange}\r\n              type=\"text\"\r\n              id=\"serviceTitle\"\r\n              name=\"title\"\r\n              maxLength=\"50\"\r\n              value={service.title}\r\n              required\r\n              autoFocus\r\n            />\r\n          </div>\r\n          <div className=\"six columns\">\r\n            <label htmlFor=\"\">Category</label>\r\n            <select\r\n              onChange={handleControlledInputChange}\r\n              onClick={handleClick}\r\n              name=\"jobCategoryId\"\r\n              id=\"jobCatelory\"\r\n              value={service.jobCategoryId}\r\n              required\r\n            >\r\n              <option value=\"0\">Select a Catelory</option>\r\n              {categories.map((c) => (\r\n                <option key={c.id} value={c.id}>\r\n                  {c.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"four columns\">\r\n            <label htmlFor=\"\">Price</label>\r\n            <input\r\n              onChange={handleControlledInputChange}\r\n              type=\"text\"\r\n              id=\"servicePrice\"\r\n              name=\"price\"\r\n              maxLength=\"50\"\r\n              value={service.price}\r\n              required\r\n              autoFocus\r\n            />\r\n          </div>\r\n          <div className=\"four columns\">\r\n            <label htmlFor=\"\">Zip Code</label>\r\n            <input\r\n              onChange={handleControlledInputChange}\r\n              type=\"number\"\r\n              id=\"zipCode\"\r\n              name=\"zipCode\"\r\n              maxLength=\"5\"\r\n              value={service.zipCode}\r\n              required\r\n              autoFocus\r\n            />\r\n          </div>\r\n          <div className=\"four columns\">\r\n            <label htmlFor=\"\">Service Radius</label>\r\n            <input\r\n              onChange={handleControlledInputChange}\r\n              type=\"number\"\r\n              id=\"serviceRadius\"\r\n              name=\"serviceRadius\"\r\n              maxLength=\"6\"\r\n              value={service.serviceRadius}\r\n              required\r\n              autoFocus\r\n            />\r\n          </div>\r\n          <div className=\"four columns\">\r\n            <label htmlFor=\"\">Visible</label>\r\n            <input\r\n              onChange={handleClick}\r\n              id=\"visible\"\r\n              name=\"visible\"\r\n              autoFocus\r\n              type=\"checkbox\"\r\n              checked={checked}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <label htmlFor=\"\">Details</label>\r\n          <textarea\r\n            onChange={handleControlledInputChange}\r\n            className=\"u-full-width\"\r\n            placeholder=\"Decription of service\"\r\n            id=\"details\"\r\n            name=\"details\"\r\n            value={service.details}\r\n            required\r\n          ></textarea>\r\n        </div>\r\n        <input\r\n          //disabled={isLoading}\r\n          onClick={(event) => {\r\n            if (service.title && service.price && service.zipCode) {\r\n              event.preventDefault();\r\n              handleService();\r\n            }\r\n          }}\r\n          className=\"button-primary\"\r\n          type=\"submit\"\r\n          value=\"Submit\"\r\n        ></input>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobSearch.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\JobFilter.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\job\\FilterForm.js",["142","143","144","145","146","147","148","149","150","151","152"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { CategoryContext } from \"../category/CategoryProvider\";\r\nimport { APIContext } from \"../api/APIProvider\";\r\nimport { JobContext } from \"./JobProvider\";\r\n\r\nexport const FilterForm = () => {\r\n  const { categories, getCategories } = useContext(CategoryContext);\r\n  const { setFilteredSearch, getJobs, jobs, filteredSearch } = useContext(\r\n    JobContext\r\n  );\r\n  const { zipCodeRadius, getZipCodeRadius } = useContext(APIContext);\r\n  const [visibleJobs, setVisibleJobs] = useState([]);\r\n  const [btnClicked, setBtnClicked] = useState(false); //notify when filter \"apply\" btn click\r\n\r\n  useEffect(() => {\r\n    getJobs();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getCategories();\r\n  }, []);\r\n\r\n  //use let so the inputs can\r\n  let jobCategoryId = useRef(null);\r\n  let zipCode = useRef(null);\r\n  let radius = useRef(null);\r\n\r\n  //only show visable jobs\r\n  useEffect(() => {\r\n    const filteredVisibleJobs = jobs.filter((job) => job.visible === true);\r\n    setVisibleJobs(filteredVisibleJobs);\r\n  }, [jobs]);\r\n\r\n  //only get radius when both zipcode and raduis are filled\r\n  useEffect(() => {\r\n    if (zipCode.current.value != \"\" && radius.current.value != \"\") {\r\n      getZipCodeRadius(zipCode.current.value, radius.current.value);\r\n    }\r\n  }, [filteredSearch, btnClicked]);\r\n\r\n  const handleFilters = () => {\r\n    const categoryId = parseInt(jobCategoryId.current.value);\r\n    const zip = zipCode.current.value;\r\n    const radiusMiles = radius.current.value;\r\n\r\n    if (\r\n      categoryId !== \"0\" &&\r\n      categoryId !== 0 &&\r\n      zip.length == 5 &&\r\n      parseInt(radiusMiles) > 0\r\n    ) {\r\n      //all filtered\r\n      const zipCodeResponse = zipCodeRadius?.DataList;\r\n      const zipCodes = zipCodeResponse.map((zip) => parseInt(zip.Code));\r\n      const subset = visibleJobs.filter(\r\n        (job) =>\r\n          zipCodes.includes(job.zipCode) &&\r\n          job.jobCategoryId === categoryId &&\r\n          job.zipCode === parseInt(zip)\r\n      );\r\n      setFilteredSearch(subset);\r\n    }\r\n    if (categoryId !== \"0\" && categoryId !== 0 && zip.length == 5) {\r\n      //check for category and zipcode\r\n      const subset = visibleJobs.filter(\r\n        (job) =>\r\n          job.jobCategoryId === categoryId && job.zipCode === parseInt(zip)\r\n      );\r\n      setFilteredSearch(subset);\r\n    } else if (categoryId !== \"0\" && categoryId !== 0) {\r\n      //check for category only\r\n      const subset = visibleJobs.filter(\r\n        (job) => job.jobCategoryId === categoryId\r\n      );\r\n      setFilteredSearch(subset);\r\n    } else if (zip.length == 5 && parseInt(radiusMiles) > 0) {\r\n      const zipCodeResponse = zipCodeRadius?.DataList;\r\n      const zipCodes = zipCodeResponse.map((zip) => parseInt(zip.Code));\r\n\r\n      const subset = visibleJobs.filter((job) =>\r\n        zipCodes.includes(job.zipCode)\r\n      );\r\n      setFilteredSearch(subset);\r\n    } else if (zip.length == 5) {\r\n      //check for zipcode only\r\n      const subset = visibleJobs.filter((job) => job.zipCode === parseInt(zip));\r\n      setFilteredSearch(subset);\r\n    } else {\r\n      setFilteredSearch(visibleJobs);\r\n    }\r\n  };\r\n\r\n  //clear fields for reset btn\r\n  const resetFields = () => {\r\n    jobCategoryId.current.value = 0;\r\n    zipCode.current.value = \"\";\r\n    radius.current.value = \"\";\r\n    setFilteredSearch(visibleJobs);\r\n  };\r\n\r\n  return (\r\n    <div className=\"s-layout\">\r\n      <div className=\"s-layout__sidebar\">\r\n        <nav className=\"s-sidebar__nav\">\r\n          <div>\r\n            <label htmlFor=\"\">Category</label>\r\n            <select\r\n              name=\"jobCategoryId\"\r\n              id=\"jobCatelory\"\r\n              ref={jobCategoryId}\r\n              required\r\n            >\r\n              <option value=\"0\">Select a Catelory</option>\r\n              {categories.map((c) => (\r\n                <option key={c.id} value={c.id}>\r\n                  {c.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Zip Code</label>\r\n            <input type=\"text\" id=\"zipCode\" ref={zipCode} />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Radius</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"radius\"\r\n              ref={radius}\r\n              placeholder=\"in miles...\"\r\n            />\r\n          </div>\r\n          <div className=\"filterBtn\">\r\n            <button\r\n              onClick={() => {\r\n                if (\r\n                  parseInt(radius.current.value) > 0 &&\r\n                  zipCode.current.value == \"\"\r\n                ) {\r\n                  alert(\"Enter zipcode to find radius\");\r\n                } else if (\r\n                  parseInt(radius.current.value) < 1 ||\r\n                  parseInt(radius.current.value) < 200\r\n                ) {\r\n                  alert(\"Radius must be between 1 and 200 miles\");\r\n                } else {\r\n                  handleFilters();\r\n                }\r\n\r\n                //btn toggle for radius useEffect\r\n                if (btnClicked === false) {\r\n                  setBtnClicked(true);\r\n                } else {\r\n                  setBtnClicked(false);\r\n                }\r\n              }}\r\n            >\r\n              Filter\r\n            </button>\r\n          </div>\r\n          <div className=\"resetBtn\">\r\n            <a\r\n              className=\"resetLink\"\r\n              href=\"#\"\r\n              onClick={() => {\r\n                resetFields();\r\n              }}\r\n            >\r\n              Reset\r\n            </a>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",["153","154"],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\api\\APIProvider.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceSearch.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\ServiceFilter.js",[],"C:\\Users\\CJ\\workspace\\frontend\\oddjobs\\oddjobs\\src\\components\\service\\FilterForm.js",["155","156","157","158","159","160","161","162","163","164","165"],"import React, { useContext, useEffect, useRef, useState } from \"react\";\r\nimport { CategoryContext } from \"../category/CategoryProvider\";\r\nimport { APIContext } from \"../api/APIProvider\";\r\nimport { ServiceContext } from \"./ServiceProvider\";\r\n\r\nexport const FilterForm = () => {\r\n  const { categories, getCategories } = useContext(CategoryContext);\r\n  const { zipCodeRadius, getZipCodeRadius } = useContext(APIContext);\r\n  const {\r\n    setFilteredSearch,\r\n    getServices,\r\n    services,\r\n    filteredSearch,\r\n  } = useContext(ServiceContext);\r\n  const [visibleServices, setVisibleServices] = useState([]);\r\n  const [btnClicked, setBtnClicked] = useState(false); //notify when filter \"apply\"\r\n\r\n  useEffect(() => {\r\n    getCategories();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getServices();\r\n  }, []);\r\n\r\n  //use let so the inputs can\r\n  let jobCategoryId = useRef(null);\r\n  let zipCode = useRef(null);\r\n  let radius = useRef(null);\r\n\r\n  //only show visible services\r\n  useEffect(() => {\r\n    const subset = services.filter((service) => service.visible === true);\r\n    setVisibleServices(subset);\r\n  }, [services]);\r\n\r\n  //only get radius when both zipcode and raduis are filled\r\n  useEffect(() => {\r\n    if (zipCode.current.value != \"\" && radius.current.value != \"\") {\r\n      getZipCodeRadius(zipCode.current.value, radius.current.value);\r\n    }\r\n  }, [filteredSearch, btnClicked]);\r\n\r\n  const handleFilters = () => {\r\n    const categoryId = parseInt(jobCategoryId.current.value);\r\n    const zip = zipCode.current.value;\r\n    const radiusMiles = radius.current.value;\r\n\r\n    if (\r\n      categoryId !== \"0\" &&\r\n      categoryId !== 0 &&\r\n      zip.length == 5 &&\r\n      parseInt(radiusMiles) > 0\r\n    ) {\r\n      //all filtered\r\n      const zipCodeResponse = zipCodeRadius?.DataList;\r\n      const zipCodes = zipCodeResponse.map((zip) => parseInt(zip.Code));\r\n      const subset = visibleServices.filter(\r\n        (service) =>\r\n          zipCodes.includes(service.zipCode) &&\r\n          service.jobCategoryId === categoryId &&\r\n          service.zipCode === parseInt(zip)\r\n      );\r\n      setFilteredSearch(subset);\r\n    }\r\n    if (categoryId !== \"0\" && categoryId !== 0 && zip.length == 5) {\r\n      //check for category and zipcode\r\n      const subset = visibleServices.filter(\r\n        (service) =>\r\n          service.jobCategoryId === categoryId &&\r\n          service.zipCode === parseInt(zip)\r\n      );\r\n      setFilteredSearch(subset);\r\n    } else if (categoryId !== \"0\" && categoryId !== 0) {\r\n      //check for category only\r\n      const subset = visibleServices.filter(\r\n        (service) => service.jobCategoryId === categoryId\r\n      );\r\n      setFilteredSearch(subset);\r\n    } else if (zip.length == 5 && parseInt(radiusMiles) > 0) {\r\n      const zipCodeResponse = zipCodeRadius?.DataList;\r\n      const zipCodes = zipCodeResponse.map((zip) => parseInt(zip.Code));\r\n\r\n      const subset = visibleServices.filter((service) =>\r\n        zipCodes.includes(service.zipCode)\r\n      );\r\n      setFilteredSearch(subset);\r\n    } else if (zip.length == 5) {\r\n      //check for zipcode only\r\n      const subset = visibleServices.filter(\r\n        (service) => service.zipCode === parseInt(zip)\r\n      );\r\n      setFilteredSearch(subset);\r\n    } else {\r\n      setFilteredSearch(visibleServices);\r\n    }\r\n  };\r\n\r\n  //clear fields for reset btn\r\n  const resetFields = () => {\r\n    jobCategoryId.current.value = 0;\r\n    zipCode.current.value = \"\";\r\n    radius.current.value = \"\";\r\n    setFilteredSearch(visibleServices);\r\n  };\r\n\r\n  return (\r\n    <div className=\"s-layout\">\r\n      <div className=\"s-layout__sidebar\">\r\n        <nav className=\"s-sidebar__nav\">\r\n          <div>\r\n            <label htmlFor=\"\">Category</label>\r\n            <select\r\n              name=\"jobCategoryId\"\r\n              id=\"jobCatelory\"\r\n              ref={jobCategoryId}\r\n              required\r\n            >\r\n              <option value=\"0\">Select a Catelory</option>\r\n              {categories.map((c) => (\r\n                <option key={c.id} value={c.id}>\r\n                  {c.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Zip Code</label>\r\n            <input type=\"text\" id=\"zipCode\" ref={zipCode} />\r\n          </div>\r\n          <div>\r\n            <label htmlFor=\"\">Radius</label>\r\n            <input\r\n              type=\"number\"\r\n              id=\"radius\"\r\n              ref={radius}\r\n              placeholder=\"in miles...\"\r\n            />\r\n          </div>\r\n          <div className=\"filterBtn\">\r\n            <button\r\n              onClick={() => {\r\n                if (\r\n                  parseInt(radius.current.value) > 0 &&\r\n                  zipCode.current.value == \"\"\r\n                ) {\r\n                  alert(\"Enter zipcode to find radius\");\r\n                } else if (\r\n                  parseInt(radius.current.value) < 1 ||\r\n                  parseInt(radius.current.value) > 200\r\n                ) {\r\n                  alert(\"Radius must be between 1 and 200 miles\");\r\n                } else {\r\n                  //btn toggle for radius useEffect\r\n                  if (btnClicked === false) {\r\n                    setBtnClicked(true);\r\n                  } else {\r\n                    setBtnClicked(false);\r\n                  }\r\n                  handleFilters();\r\n                }\r\n              }}\r\n            >\r\n              Filter\r\n            </button>\r\n          </div>\r\n          <div className=\"resetBtn\">\r\n            <a\r\n              className=\"resetLink\"\r\n              href=\"#\"\r\n              onClick={() => {\r\n                resetFields();\r\n              }}\r\n            >\r\n              Reset\r\n            </a>\r\n          </div>\r\n        </nav>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n",{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":24,"column":6,"nodeType":"172","endLine":24,"endColumn":8,"suggestions":"173"},{"ruleId":"170","severity":1,"message":"174","line":46,"column":6,"nodeType":"172","endLine":46,"endColumn":38,"suggestions":"175"},{"ruleId":"176","severity":1,"message":"177","line":12,"column":10,"nodeType":"178","messageId":"179","endLine":12,"endColumn":19},{"ruleId":"170","severity":1,"message":"180","line":75,"column":6,"nodeType":"172","endLine":75,"endColumn":8,"suggestions":"181"},{"ruleId":"176","severity":1,"message":"182","line":1,"column":27,"nodeType":"178","messageId":"179","endLine":1,"endColumn":36},{"ruleId":"170","severity":1,"message":"183","line":15,"column":6,"nodeType":"172","endLine":15,"endColumn":8,"suggestions":"184"},{"ruleId":"176","severity":1,"message":"182","line":1,"column":29,"nodeType":"178","messageId":"179","endLine":1,"endColumn":38},{"ruleId":"176","severity":1,"message":"185","line":1,"column":40,"nodeType":"178","messageId":"179","endLine":1,"endColumn":48},{"ruleId":"186","severity":1,"message":"187","line":29,"column":5,"nodeType":"188","endLine":29,"endColumn":46},{"ruleId":"170","severity":1,"message":"189","line":25,"column":6,"nodeType":"172","endLine":25,"endColumn":8,"suggestions":"190"},{"ruleId":"170","severity":1,"message":"174","line":50,"column":6,"nodeType":"172","endLine":50,"endColumn":46,"suggestions":"191"},{"ruleId":"176","severity":1,"message":"192","line":9,"column":9,"nodeType":"178","messageId":"179","endLine":9,"endColumn":16},{"ruleId":"170","severity":1,"message":"193","line":15,"column":6,"nodeType":"172","endLine":15,"endColumn":8,"suggestions":"194"},{"ruleId":"176","severity":1,"message":"182","line":1,"column":29,"nodeType":"178","messageId":"179","endLine":1,"endColumn":38},{"ruleId":"176","severity":1,"message":"185","line":1,"column":40,"nodeType":"178","messageId":"179","endLine":1,"endColumn":48},{"ruleId":"186","severity":1,"message":"187","line":29,"column":5,"nodeType":"188","endLine":29,"endColumn":24},{"ruleId":"170","severity":1,"message":"195","line":72,"column":6,"nodeType":"172","endLine":72,"endColumn":8,"suggestions":"196"},{"ruleId":"170","severity":1,"message":"171","line":17,"column":6,"nodeType":"172","endLine":17,"endColumn":8,"suggestions":"197"},{"ruleId":"170","severity":1,"message":"198","line":21,"column":6,"nodeType":"172","endLine":21,"endColumn":8,"suggestions":"199"},{"ruleId":"200","severity":1,"message":"201","line":36,"column":31,"nodeType":"202","messageId":"203","endLine":36,"endColumn":33},{"ruleId":"200","severity":1,"message":"201","line":36,"column":61,"nodeType":"202","messageId":"203","endLine":36,"endColumn":63},{"ruleId":"170","severity":1,"message":"204","line":39,"column":6,"nodeType":"172","endLine":39,"endColumn":34,"suggestions":"205"},{"ruleId":"200","severity":1,"message":"206","line":49,"column":18,"nodeType":"202","messageId":"203","endLine":49,"endColumn":20},{"ruleId":"200","severity":1,"message":"206","line":63,"column":62,"nodeType":"202","messageId":"203","endLine":63,"endColumn":64},{"ruleId":"200","severity":1,"message":"206","line":76,"column":27,"nodeType":"202","messageId":"203","endLine":76,"endColumn":29},{"ruleId":"200","severity":1,"message":"206","line":84,"column":27,"nodeType":"202","messageId":"203","endLine":84,"endColumn":29},{"ruleId":"200","severity":1,"message":"206","line":139,"column":41,"nodeType":"202","messageId":"203","endLine":139,"endColumn":43},{"ruleId":"186","severity":1,"message":"207","line":163,"column":13,"nodeType":"188","endLine":169,"endColumn":14},{"ruleId":"166","replacedBy":"208"},{"ruleId":"168","replacedBy":"209"},{"ruleId":"170","severity":1,"message":"198","line":20,"column":6,"nodeType":"172","endLine":20,"endColumn":8,"suggestions":"210"},{"ruleId":"170","severity":1,"message":"189","line":24,"column":6,"nodeType":"172","endLine":24,"endColumn":8,"suggestions":"211"},{"ruleId":"200","severity":1,"message":"201","line":39,"column":31,"nodeType":"202","messageId":"203","endLine":39,"endColumn":33},{"ruleId":"200","severity":1,"message":"201","line":39,"column":61,"nodeType":"202","messageId":"203","endLine":39,"endColumn":63},{"ruleId":"170","severity":1,"message":"204","line":42,"column":6,"nodeType":"172","endLine":42,"endColumn":34,"suggestions":"212"},{"ruleId":"200","severity":1,"message":"206","line":52,"column":18,"nodeType":"202","messageId":"203","endLine":52,"endColumn":20},{"ruleId":"200","severity":1,"message":"206","line":66,"column":62,"nodeType":"202","messageId":"203","endLine":66,"endColumn":64},{"ruleId":"200","severity":1,"message":"206","line":80,"column":27,"nodeType":"202","messageId":"203","endLine":80,"endColumn":29},{"ruleId":"200","severity":1,"message":"206","line":88,"column":27,"nodeType":"202","messageId":"203","endLine":88,"endColumn":29},{"ruleId":"200","severity":1,"message":"206","line":145,"column":41,"nodeType":"202","messageId":"203","endLine":145,"endColumn":43},{"ruleId":"186","severity":1,"message":"207","line":168,"column":13,"nodeType":"188","endLine":174,"endColumn":14},"no-native-reassign",["213"],"no-negated-in-lhs",["214"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getJobs'. Either include it or remove the dependency array.","ArrayExpression",["215"],"React Hook useEffect has a missing dependency: 'filteredSearch'. Either include it or remove the dependency array.",["216"],"no-unused-vars","'isLoading' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getCategories', 'getJobById', and 'jobId'. Either include them or remove the dependency array.",["217"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'getJobById' and 'jobId'. Either include them or remove the dependency array.",["218"],"'useState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'getServices'. Either include it or remove the dependency array.",["219"],["220"],"'history' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getServiceById' and 'serviceId'. Either include them or remove the dependency array.",["221"],"React Hook useEffect has missing dependencies: 'getCategories', 'getServiceById', and 'serviceId'. Either include them or remove the dependency array.",["222"],["223"],"React Hook useEffect has a missing dependency: 'getCategories'. Either include it or remove the dependency array.",["224"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'getZipCodeRadius'. Either include it or remove the dependency array.",["225"],"Expected '===' and instead saw '=='.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["213"],["214"],["226"],["227"],["228"],"no-global-assign","no-unsafe-negation",{"desc":"229","fix":"230"},{"desc":"231","fix":"232"},{"desc":"233","fix":"234"},{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},{"desc":"243","fix":"244"},{"desc":"229","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},{"desc":"246","fix":"250"},{"desc":"237","fix":"251"},{"desc":"248","fix":"252"},"Update the dependencies array to be: [getJobs]",{"range":"253","text":"254"},"Update the dependencies array to be: [filteredSearch, jobs, searchTerms, visibleJobs]",{"range":"255","text":"256"},"Update the dependencies array to be: [getCategories, getJobById, jobId]",{"range":"257","text":"258"},"Update the dependencies array to be: [getJobById, jobId]",{"range":"259","text":"260"},"Update the dependencies array to be: [getServices]",{"range":"261","text":"262"},"Update the dependencies array to be: [filteredSearch, searchTerms, services, visibleServices]",{"range":"263","text":"264"},"Update the dependencies array to be: [getServiceById, serviceId]",{"range":"265","text":"266"},"Update the dependencies array to be: [getCategories, getServiceById, serviceId]",{"range":"267","text":"268"},{"range":"269","text":"254"},"Update the dependencies array to be: [getCategories]",{"range":"270","text":"271"},"Update the dependencies array to be: [filteredSearch, btnClicked, getZipCodeRadius]",{"range":"272","text":"273"},{"range":"274","text":"271"},{"range":"275","text":"262"},{"range":"276","text":"273"},[863,865],"[getJobs]",[1545,1577],"[filteredSearch, jobs, searchTerms, visibleJobs]",[2193,2195],"[getCategories, getJobById, jobId]",[483,485],"[getJobById, jobId]",[943,945],"[getServices]",[1791,1831],"[filteredSearch, searchTerms, services, visibleServices]",[511,513],"[getServiceById, serviceId]",[2299,2301],"[getCategories, getServiceById, serviceId]",[703,705],[759,761],"[getCategories]",[1317,1345],"[filteredSearch, btnClicked, getZipCodeRadius]",[741,743],[795,797],[1351,1379]]